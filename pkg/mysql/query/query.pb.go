// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

/*
Package query is a generated protocol buffer package.

It is generated from these files:
	query.proto

It has these top-level messages:
	Value
	BindVariable
	BoundQuery
	Field
	Row
*/
package query

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Flags sent from the MySQL C API
type MySqlFlag int32

const (
	MySqlFlag_EMPTY                 MySqlFlag = 0
	MySqlFlag_NOT_NULL_FLAG         MySqlFlag = 1
	MySqlFlag_PRI_KEY_FLAG          MySqlFlag = 2
	MySqlFlag_UNIQUE_KEY_FLAG       MySqlFlag = 4
	MySqlFlag_MULTIPLE_KEY_FLAG     MySqlFlag = 8
	MySqlFlag_BLOB_FLAG             MySqlFlag = 16
	MySqlFlag_UNSIGNED_FLAG         MySqlFlag = 32
	MySqlFlag_ZEROFILL_FLAG         MySqlFlag = 64
	MySqlFlag_BINARY_FLAG           MySqlFlag = 128
	MySqlFlag_ENUM_FLAG             MySqlFlag = 256
	MySqlFlag_AUTO_INCREMENT_FLAG   MySqlFlag = 512
	MySqlFlag_TIMESTAMP_FLAG        MySqlFlag = 1024
	MySqlFlag_SET_FLAG              MySqlFlag = 2048
	MySqlFlag_NO_DEFAULT_VALUE_FLAG MySqlFlag = 4096
	MySqlFlag_ON_UPDATE_NOW_FLAG    MySqlFlag = 8192
	MySqlFlag_NUM_FLAG              MySqlFlag = 32768
	MySqlFlag_PART_KEY_FLAG         MySqlFlag = 16384
	MySqlFlag_GROUP_FLAG            MySqlFlag = 32768
	MySqlFlag_UNIQUE_FLAG           MySqlFlag = 65536
	MySqlFlag_BINCMP_FLAG           MySqlFlag = 131072
)

var MySqlFlag_name = map[int32]string{
	0:     "EMPTY",
	1:     "NOT_NULL_FLAG",
	2:     "PRI_KEY_FLAG",
	4:     "UNIQUE_KEY_FLAG",
	8:     "MULTIPLE_KEY_FLAG",
	16:    "BLOB_FLAG",
	32:    "UNSIGNED_FLAG",
	64:    "ZEROFILL_FLAG",
	128:   "BINARY_FLAG",
	256:   "ENUM_FLAG",
	512:   "AUTO_INCREMENT_FLAG",
	1024:  "TIMESTAMP_FLAG",
	2048:  "SET_FLAG",
	4096:  "NO_DEFAULT_VALUE_FLAG",
	8192:  "ON_UPDATE_NOW_FLAG",
	32768: "NUM_FLAG",
	16384: "PART_KEY_FLAG",
	// Duplicate value: 32768: "GROUP_FLAG",
	65536:  "UNIQUE_FLAG",
	131072: "BINCMP_FLAG",
}
var MySqlFlag_value = map[string]int32{
	"EMPTY":                 0,
	"NOT_NULL_FLAG":         1,
	"PRI_KEY_FLAG":          2,
	"UNIQUE_KEY_FLAG":       4,
	"MULTIPLE_KEY_FLAG":     8,
	"BLOB_FLAG":             16,
	"UNSIGNED_FLAG":         32,
	"ZEROFILL_FLAG":         64,
	"BINARY_FLAG":           128,
	"ENUM_FLAG":             256,
	"AUTO_INCREMENT_FLAG":   512,
	"TIMESTAMP_FLAG":        1024,
	"SET_FLAG":              2048,
	"NO_DEFAULT_VALUE_FLAG": 4096,
	"ON_UPDATE_NOW_FLAG":    8192,
	"NUM_FLAG":              32768,
	"PART_KEY_FLAG":         16384,
	"GROUP_FLAG":            32768,
	"UNIQUE_FLAG":           65536,
	"BINCMP_FLAG":           131072,
}

func (x MySqlFlag) String() string {
	return proto.EnumName(MySqlFlag_name, int32(x))
}
func (MySqlFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Flag allows us to qualify types by their common properties.
type Flag int32

const (
	Flag_NONE       Flag = 0
	Flag_ISINTEGRAL Flag = 256
	Flag_ISUNSIGNED Flag = 512
	Flag_ISFLOAT    Flag = 1024
	Flag_ISQUOTED   Flag = 2048
	Flag_ISTEXT     Flag = 4096
	Flag_ISBINARY   Flag = 8192
)

var Flag_name = map[int32]string{
	0:    "NONE",
	256:  "ISINTEGRAL",
	512:  "ISUNSIGNED",
	1024: "ISFLOAT",
	2048: "ISQUOTED",
	4096: "ISTEXT",
	8192: "ISBINARY",
}
var Flag_value = map[string]int32{
	"NONE":       0,
	"ISINTEGRAL": 256,
	"ISUNSIGNED": 512,
	"ISFLOAT":    1024,
	"ISQUOTED":   2048,
	"ISTEXT":     4096,
	"ISBINARY":   8192,
}

func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}
func (Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Type defines the various supported data types in bind vars
// and query results.
type Type int32

const (
	// NULL_TYPE specifies a NULL type.
	Type_NULL_TYPE Type = 0
	// INT8 specifies a TINYINT type.
	// Properties: 1, IsNumber.
	Type_INT8 Type = 257
	// UINT8 specifies a TINYINT UNSIGNED type.
	// Properties: 2, IsNumber, IsUnsigned.
	Type_UINT8 Type = 770
	// INT16 specifies a SMALLINT type.
	// Properties: 3, IsNumber.
	Type_INT16 Type = 259
	// UINT16 specifies a SMALLINT UNSIGNED type.
	// Properties: 4, IsNumber, IsUnsigned.
	Type_UINT16 Type = 772
	// INT24 specifies a MEDIUMINT type.
	// Properties: 5, IsNumber.
	Type_INT24 Type = 261
	// UINT24 specifies a MEDIUMINT UNSIGNED type.
	// Properties: 6, IsNumber, IsUnsigned.
	Type_UINT24 Type = 774
	// INT32 specifies a INTEGER type.
	// Properties: 7, IsNumber.
	Type_INT32 Type = 263
	// UINT32 specifies a INTEGER UNSIGNED type.
	// Properties: 8, IsNumber, IsUnsigned.
	Type_UINT32 Type = 776
	// INT64 specifies a BIGINT type.
	// Properties: 9, IsNumber.
	Type_INT64 Type = 265
	// UINT64 specifies a BIGINT UNSIGNED type.
	// Properties: 10, IsNumber, IsUnsigned.
	Type_UINT64 Type = 778
	// FLOAT32 specifies a FLOAT type.
	// Properties: 11, IsFloat.
	Type_FLOAT32 Type = 1035
	// FLOAT64 specifies a DOUBLE or REAL type.
	// Properties: 12, IsFloat.
	Type_FLOAT64 Type = 1036
	// TIMESTAMP specifies a TIMESTAMP type.
	// Properties: 13, IsQuoted.
	Type_TIMESTAMP Type = 2061
	// DATE specifies a DATE type.
	// Properties: 14, IsQuoted.
	Type_DATE Type = 2062
	// TIME specifies a TIME type.
	// Properties: 15, IsQuoted.
	Type_TIME Type = 2063
	// DATETIME specifies a DATETIME type.
	// Properties: 16, IsQuoted.
	Type_DATETIME Type = 2064
	// YEAR specifies a YEAR type.
	// Properties: 17, IsNumber, IsUnsigned.
	Type_YEAR Type = 785
	// DECIMAL specifies a DECIMAL or NUMERIC type.
	// Properties: 18, None.
	Type_DECIMAL Type = 18
	// TEXT specifies a TEXT type.
	// Properties: 19, IsQuoted, IsText.
	Type_TEXT Type = 6163
	// BLOB specifies a BLOB type.
	// Properties: 20, IsQuoted, IsBinary.
	Type_BLOB Type = 10260
	// VARCHAR specifies a VARCHAR type.
	// Properties: 21, IsQuoted, IsText.
	Type_VARCHAR Type = 6165
	// VARBINARY specifies a VARBINARY type.
	// Properties: 22, IsQuoted, IsBinary.
	Type_VARBINARY Type = 10262
	// CHAR specifies a CHAR type.
	// Properties: 23, IsQuoted, IsText.
	Type_CHAR Type = 6167
	// BINARY specifies a BINARY type.
	// Properties: 24, IsQuoted, IsBinary.
	Type_BINARY Type = 10264
	// BIT specifies a BIT type.
	// Properties: 25, IsQuoted.
	Type_BIT Type = 2073
	// ENUM specifies an ENUM type.
	// Properties: 26, IsQuoted.
	Type_ENUM Type = 2074
	// SET specifies a SET type.
	// Properties: 27, IsQuoted.
	Type_SET Type = 2075
	// TUPLE specifies a a tuple. This cannot
	// be returned in a QueryResult, but it can
	// be sent as a bind var.
	// Properties: 28, None.
	Type_TUPLE Type = 28
	// GEOMETRY specifies a GEOMETRY type.
	// Properties: 29, IsQuoted.
	Type_GEOMETRY Type = 2077
	// JSON specified a JSON type.
	// Properties: 30, IsQuoted.
	Type_JSON Type = 2078
)

var Type_name = map[int32]string{
	0:     "NULL_TYPE",
	257:   "INT8",
	770:   "UINT8",
	259:   "INT16",
	772:   "UINT16",
	261:   "INT24",
	774:   "UINT24",
	263:   "INT32",
	776:   "UINT32",
	265:   "INT64",
	778:   "UINT64",
	1035:  "FLOAT32",
	1036:  "FLOAT64",
	2061:  "TIMESTAMP",
	2062:  "DATE",
	2063:  "TIME",
	2064:  "DATETIME",
	785:   "YEAR",
	18:    "DECIMAL",
	6163:  "TEXT",
	10260: "BLOB",
	6165:  "VARCHAR",
	10262: "VARBINARY",
	6167:  "CHAR",
	10264: "BINARY",
	2073:  "BIT",
	2074:  "ENUM",
	2075:  "SET",
	28:    "TUPLE",
	2077:  "GEOMETRY",
	2078:  "JSON",
}
var Type_value = map[string]int32{
	"NULL_TYPE": 0,
	"INT8":      257,
	"UINT8":     770,
	"INT16":     259,
	"UINT16":    772,
	"INT24":     261,
	"UINT24":    774,
	"INT32":     263,
	"UINT32":    776,
	"INT64":     265,
	"UINT64":    778,
	"FLOAT32":   1035,
	"FLOAT64":   1036,
	"TIMESTAMP": 2061,
	"DATE":      2062,
	"TIME":      2063,
	"DATETIME":  2064,
	"YEAR":      785,
	"DECIMAL":   18,
	"TEXT":      6163,
	"BLOB":      10260,
	"VARCHAR":   6165,
	"VARBINARY": 10262,
	"CHAR":      6167,
	"BINARY":    10264,
	"BIT":       2073,
	"ENUM":      2074,
	"SET":       2075,
	"TUPLE":     28,
	"GEOMETRY":  2077,
	"JSON":      2078,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Value represents a typed value.
type Value struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Value) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// BindVariable represents a single bind variable in a Query.
type BindVariable struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// values are set if type is TUPLE.
	Values []*Value `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *BindVariable) Reset()                    { *m = BindVariable{} }
func (m *BindVariable) String() string            { return proto.CompactTextString(m) }
func (*BindVariable) ProtoMessage()               {}
func (*BindVariable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BindVariable) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *BindVariable) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BindVariable) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// BoundQuery is a query with its bind variables
type BoundQuery struct {
	// sql is the SQL query to execute
	Sql string `protobuf:"bytes,1,opt,name=sql" json:"sql,omitempty"`
	// bind_variables is a map of all bind variables to expand in the query
	BindVariables map[string]*BindVariable `protobuf:"bytes,2,rep,name=bind_variables,json=bindVariables" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BoundQuery) Reset()                    { *m = BoundQuery{} }
func (m *BoundQuery) String() string            { return proto.CompactTextString(m) }
func (*BoundQuery) ProtoMessage()               {}
func (*BoundQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BoundQuery) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *BoundQuery) GetBindVariables() map[string]*BindVariable {
	if m != nil {
		return m.BindVariables
	}
	return nil
}

// Field describes a single column returned by a query
type Field struct {
	// name of the field as returned by mysql C API
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// vitess-defined type. Conversion function is in sqltypes package.
	Type Type `protobuf:"varint,2,opt,name=type,enum=query.Type" json:"type,omitempty"`
	// Remaining fields from mysql C API.
	// These fields are only populated when ExecuteOptions.included_fields
	// is set to IncludedFields.ALL.
	Table    string `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
	OrgTable string `protobuf:"bytes,4,opt,name=org_table,json=orgTable" json:"org_table,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database" json:"database,omitempty"`
	OrgName  string `protobuf:"bytes,6,opt,name=org_name,json=orgName" json:"org_name,omitempty"`
	// column_length is really a uint32. All 32 bits can be used.
	ColumnLength uint32 `protobuf:"varint,7,opt,name=column_length,json=columnLength" json:"column_length,omitempty"`
	// charset is actually a uint16. Only the lower 16 bits are used.
	Charset uint32 `protobuf:"varint,8,opt,name=charset" json:"charset,omitempty"`
	// decimals is actualy a uint8. Only the lower 8 bits are used.
	Decimals uint32 `protobuf:"varint,9,opt,name=decimals" json:"decimals,omitempty"`
	// flags is actually a uint16. Only the lower 16 bits are used.
	Flags uint32 `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *Field) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Field) GetOrgTable() string {
	if m != nil {
		return m.OrgTable
	}
	return ""
}

func (m *Field) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Field) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *Field) GetColumnLength() uint32 {
	if m != nil {
		return m.ColumnLength
	}
	return 0
}

func (m *Field) GetCharset() uint32 {
	if m != nil {
		return m.Charset
	}
	return 0
}

func (m *Field) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Field) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

// Row is a database row.
type Row struct {
	// lengths contains the length of each value in values.
	// A length of -1 means that the field is NULL. While
	// reading values, you have to accummulate the length
	// to know the offset where the next value begins in values.
	Lengths []int64 `protobuf:"zigzag64,1,rep,packed,name=lengths" json:"lengths,omitempty"`
	// values contains a concatenation of all values in the row.
	Values []byte `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Row) GetLengths() []int64 {
	if m != nil {
		return m.Lengths
	}
	return nil
}

func (m *Row) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Value)(nil), "query.Value")
	proto.RegisterType((*BindVariable)(nil), "query.BindVariable")
	proto.RegisterType((*BoundQuery)(nil), "query.BoundQuery")
	proto.RegisterType((*Field)(nil), "query.Field")
	proto.RegisterType((*Row)(nil), "query.Row")
	proto.RegisterEnum("query.MySqlFlag", MySqlFlag_name, MySqlFlag_value)
	proto.RegisterEnum("query.Flag", Flag_name, Flag_value)
	proto.RegisterEnum("query.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("query.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x5b, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x37, 0x89, 0x13, 0x9c, 0x93, 0x04, 0x86, 0xa1, 0xdb, 0xba, 0xb4, 0x52, 0x23, 0xba,
	0x0f, 0x94, 0x07, 0x44, 0x03, 0xa2, 0xab, 0x3e, 0x54, 0x38, 0x30, 0xa1, 0xee, 0x3a, 0x63, 0x33,
	0x1e, 0xd3, 0xd2, 0x17, 0xcb, 0x80, 0x9b, 0x8d, 0x30, 0x09, 0xc4, 0x81, 0x2a, 0x6f, 0xe9, 0xbd,
	0xdb, 0xfb, 0x7d, 0x7b, 0x51, 0xfb, 0x61, 0xfa, 0xc9, 0xaa, 0x33, 0xb6, 0x43, 0xa4, 0x4a, 0x7d,
	0xe8, 0x13, 0xf3, 0xff, 0xff, 0xce, 0x9c, 0xdb, 0x18, 0x05, 0x6a, 0xd7, 0x37, 0xd1, 0x68, 0xb2,
	0x79, 0x35, 0x1a, 0x8e, 0x87, 0xb4, 0xac, 0xc4, 0xda, 0x1b, 0x50, 0x3e, 0x0e, 0xe3, 0x9b, 0x88,
	0xbe, 0x04, 0xda, 0x78, 0x72, 0x15, 0x19, 0x85, 0x66, 0x61, 0x7d, 0xb1, 0x55, 0xdb, 0x4c, 0x63,
	0xe5, 0xe4, 0x2a, 0x12, 0x0a, 0xd0, 0x67, 0xa0, 0x7c, 0x8b, 0x91, 0x46, 0xb1, 0x59, 0x58, 0xaf,
	0x8b, 0x54, 0xac, 0x5d, 0x40, 0xbd, 0xdd, 0x1f, 0x9c, 0x1f, 0x87, 0xa3, 0x7e, 0x78, 0x1a, 0xff,
	0xdf, 0x34, 0xf4, 0x01, 0x54, 0xd4, 0x21, 0x31, 0x4a, 0xcd, 0xd2, 0x7a, 0xad, 0x55, 0xcf, 0x2e,
	0xaa, 0xde, 0x44, 0xc6, 0xd6, 0xfe, 0x2e, 0x00, 0xb4, 0x87, 0x37, 0x83, 0xf3, 0x23, 0x84, 0x94,
	0x40, 0x29, 0xb9, 0x8e, 0x55, 0xa9, 0xaa, 0xc0, 0x23, 0x7d, 0x04, 0x8b, 0xa7, 0xfd, 0xc1, 0x79,
	0x70, 0x9b, 0xb5, 0x93, 0x18, 0x45, 0x95, 0xee, 0x41, 0x96, 0xee, 0xee, 0xf2, 0xe6, 0x7c, 0xd7,
	0x09, 0x1b, 0x8c, 0x47, 0x13, 0xd1, 0x38, 0x9d, 0xf7, 0x56, 0x7d, 0xa0, 0xff, 0x0e, 0xc2, 0xa2,
	0x17, 0xd1, 0x24, 0x2f, 0x7a, 0x11, 0x4d, 0xe8, 0x2b, 0xf3, 0x13, 0xd5, 0x5a, 0x2b, 0x79, 0xad,
	0xb9, 0xbb, 0xd9, 0x98, 0xaf, 0x17, 0x1f, 0x16, 0xd6, 0x9e, 0x16, 0xa1, 0xdc, 0xe9, 0x47, 0xf1,
	0x39, 0xa5, 0xa0, 0x0d, 0xc2, 0xcb, 0x28, 0xcb, 0xa5, 0xce, 0xb3, 0xfd, 0x15, 0xff, 0x63, 0x7f,
	0x63, 0x4c, 0x69, 0x94, 0xd4, 0xad, 0x54, 0xd0, 0x17, 0xa0, 0x3a, 0x1c, 0xf5, 0x82, 0x94, 0x68,
	0x8a, 0xe8, 0xc3, 0x51, 0x4f, 0x2a, 0xb8, 0x0a, 0xfa, 0x79, 0x38, 0x0e, 0x4f, 0xc3, 0x24, 0x32,
	0xca, 0x29, 0xcb, 0x35, 0x7d, 0x1e, 0x30, 0x2e, 0x50, 0x7d, 0x54, 0x14, 0x5b, 0x18, 0x8e, 0x7a,
	0x1c, 0x5b, 0x79, 0x19, 0x1a, 0x67, 0xc3, 0xf8, 0xe6, 0x72, 0x10, 0xc4, 0xd1, 0xa0, 0x37, 0x7e,
	0x6c, 0x2c, 0x34, 0x0b, 0xeb, 0x0d, 0x51, 0x4f, 0x4d, 0x5b, 0x79, 0xd4, 0x80, 0x85, 0xb3, 0xc7,
	0xe1, 0x28, 0x89, 0xc6, 0x86, 0xae, 0x70, 0x2e, 0x55, 0xd5, 0xe8, 0xac, 0x7f, 0x19, 0xc6, 0x89,
	0x51, 0x55, 0x68, 0xa6, 0x71, 0x88, 0xf7, 0xe2, 0xb0, 0x97, 0x18, 0xa0, 0x40, 0x2a, 0xd6, 0x5e,
	0x83, 0x92, 0x18, 0xbe, 0x8f, 0x29, 0xd3, 0x82, 0x89, 0x51, 0x68, 0x96, 0xd6, 0xa9, 0xc8, 0x25,
	0x7d, 0x76, 0xf6, 0x95, 0xa4, 0x1f, 0x4f, 0xa6, 0x36, 0x7e, 0x28, 0x41, 0xb5, 0x3b, 0xf1, 0xae,
	0xe3, 0x4e, 0x1c, 0xf6, 0x68, 0x15, 0xca, 0xac, 0xeb, 0xca, 0x13, 0x72, 0x8f, 0x2e, 0x43, 0x83,
	0x3b, 0x32, 0xe0, 0xbe, 0x6d, 0x07, 0x1d, 0xdb, 0x3c, 0x24, 0x05, 0x4a, 0xa0, 0xee, 0x0a, 0x2b,
	0x78, 0xc4, 0x4e, 0x52, 0xa7, 0x48, 0x57, 0x60, 0xc9, 0xe7, 0xd6, 0x91, 0xcf, 0xee, 0x4c, 0x8d,
	0xde, 0x87, 0xe5, 0xae, 0x6f, 0x4b, 0xcb, 0xb5, 0xe7, 0x6c, 0x9d, 0x36, 0xa0, 0xda, 0xb6, 0x9d,
	0x76, 0x2a, 0x09, 0xe6, 0xf7, 0xb9, 0x67, 0x1d, 0x72, 0x76, 0x90, 0x5a, 0x4d, 0xb4, 0xde, 0x65,
	0xc2, 0xe9, 0x58, 0x79, 0xc9, 0x3d, 0x4a, 0xa0, 0xd6, 0xb6, 0xb8, 0x29, 0xb2, 0x2c, 0xd3, 0x02,
	0x5d, 0x84, 0x2a, 0xe3, 0x7e, 0x37, 0xd3, 0x45, 0x6a, 0xc0, 0x8a, 0xe9, 0x4b, 0x27, 0xb0, 0xf8,
	0xbe, 0x60, 0x5d, 0xc6, 0x65, 0x46, 0x34, 0xba, 0x02, 0x8b, 0xd2, 0xea, 0x32, 0x4f, 0x9a, 0x5d,
	0x37, 0x33, 0xb1, 0x0b, 0xdd, 0x63, 0x79, 0x0c, 0xa1, 0xab, 0x70, 0x9f, 0x3b, 0xc1, 0x01, 0xeb,
	0x98, 0xbe, 0x2d, 0x83, 0x63, 0xd3, 0xf6, 0x59, 0xc6, 0x9a, 0xf4, 0x39, 0xa0, 0x0e, 0x0f, 0x7c,
	0xf7, 0xc0, 0x94, 0x2c, 0xe0, 0xce, 0xdb, 0x19, 0xd8, 0xa3, 0x8b, 0xa0, 0xdf, 0x75, 0x30, 0xc5,
	0x2d, 0x34, 0x5c, 0x53, 0xc8, 0xbb, 0x61, 0xa7, 0x53, 0x5c, 0x16, 0x1c, 0x0a, 0xc7, 0x77, 0xef,
	0xc2, 0x96, 0xa1, 0x96, 0x2d, 0x2b, 0xb3, 0x34, 0xb4, 0xda, 0x16, 0xdf, 0x9f, 0xf5, 0x37, 0xd5,
	0x57, 0x8b, 0xa4, 0xb0, 0x71, 0x01, 0x9a, 0x7a, 0x0e, 0x1d, 0x34, 0xee, 0x70, 0x46, 0xee, 0xd1,
	0x25, 0x00, 0xcb, 0xb3, 0xb8, 0x64, 0x87, 0xc2, 0xb4, 0x71, 0x6c, 0x65, 0xe4, 0x0b, 0xc4, 0x69,
	0xeb, 0xb0, 0x60, 0x79, 0x1d, 0xdb, 0x31, 0x65, 0x36, 0xa6, 0xe5, 0x1d, 0xf9, 0x8e, 0x44, 0x48,
	0x68, 0x0d, 0x2a, 0x96, 0x27, 0xd9, 0x3b, 0x12, 0xe7, 0x52, 0x2c, 0xdd, 0x2a, 0x99, 0xee, 0x6d,
	0x3c, 0x29, 0x81, 0x86, 0xff, 0x24, 0xf8, 0x40, 0xea, 0xb5, 0xe5, 0x89, 0x8b, 0x25, 0xab, 0xa0,
	0x59, 0x5c, 0x3e, 0x24, 0x1f, 0x14, 0x29, 0x40, 0xd9, 0x57, 0xe7, 0x0f, 0x2b, 0x78, 0xb6, 0xb8,
	0x7c, 0x75, 0x97, 0x7c, 0x54, 0xc4, 0xb4, 0x7e, 0x2a, 0x3e, 0xce, 0x41, 0x6b, 0x87, 0x7c, 0x32,
	0x03, 0xad, 0x1d, 0xf2, 0x69, 0x0e, 0xb6, 0x5b, 0xe4, 0xb3, 0x19, 0xd8, 0x6e, 0x91, 0xcf, 0x73,
	0xb0, 0xbb, 0x43, 0x9e, 0xcc, 0xc0, 0xee, 0x0e, 0xf9, 0xa2, 0x82, 0xb3, 0xa8, 0x49, 0xb6, 0x5b,
	0xe4, 0x4b, 0x7d, 0xa6, 0x76, 0x77, 0xc8, 0x57, 0x3a, 0xbe, 0xff, 0xec, 0x55, 0xc9, 0xd7, 0x04,
	0xdb, 0xc4, 0x07, 0x22, 0xdf, 0xa8, 0x23, 0x22, 0xf2, 0x2d, 0xc1, 0x19, 0xd1, 0x55, 0xf2, 0x3b,
	0x45, 0x4e, 0x98, 0x29, 0xc8, 0xf7, 0x15, 0x5a, 0x83, 0x85, 0x03, 0xb6, 0x6f, 0x75, 0x4d, 0x9b,
	0x50, 0x75, 0x03, 0xb7, 0xf2, 0xe3, 0x16, 0x1e, 0xf1, 0xf3, 0x24, 0x3f, 0xb9, 0x58, 0xf0, 0xd8,
	0x14, 0xfb, 0x6f, 0x9a, 0x82, 0xfc, 0xbc, 0x85, 0x05, 0x8f, 0x4d, 0x91, 0xed, 0xeb, 0x17, 0x17,
	0x03, 0x15, 0x7a, 0xba, 0x85, 0x4d, 0x67, 0xfe, 0xaf, 0x2e, 0xd5, 0xa1, 0xd4, 0xb6, 0x24, 0xf9,
	0x4d, 0x55, 0xc3, 0x4f, 0x94, 0xfc, 0x4e, 0xd0, 0xf4, 0x98, 0x24, 0x7f, 0xa0, 0x59, 0x96, 0xbe,
	0x6b, 0x33, 0xf2, 0x22, 0x36, 0x77, 0xc8, 0x9c, 0x2e, 0x93, 0xe2, 0x84, 0xfc, 0xa9, 0xc2, 0xdf,
	0xf2, 0x1c, 0x4e, 0xfe, 0x22, 0xed, 0x65, 0x58, 0xea, 0x0f, 0x37, 0x6f, 0xfb, 0xe3, 0x28, 0x49,
	0xd2, 0x1f, 0x9b, 0xd3, 0x8a, 0xfa, 0xb3, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0xad,
	0xac, 0x17, 0x82, 0x06, 0x00, 0x00,
}
